*autofix.txt*	Automatically fix QuickFix errors

==============================================================================
CONTENTS					*autofix-contents*

INTRODUCTION			|autofix-introduction|
USAGE				|autofix-usage|
  COMMANDS			  |autofix-commands|
CUSTOMIZING			|autofix-customizing|
  DEFINING FIXERS		  |autofix-defining-fixers|
CHANGELOG			|autofix-changelog|

==============================================================================
INTRODUCTION					*autofix-introduction*

*vim-autofix* lets you fix QuickFix errors with "Fixers".

"Fixer" is a thing which can 1. match QuickFix error and 2. fix the error.

This plugin comes with some default Fixers, and plugin users can easily add
their own Fixers. For how to define your own fixer, please refer to
|autofix-defining-fixers|.

==============================================================================
USAGE						*autofix-usage*

vim-autofix defines some commands described in the next section. Use them
as-is, or define mappings yourself to make it easier to invoke. For example:

>
  " "fq" for fix quickfix items
  nnoremap <silent> <Leader>fq :<C-u>Autofix<CR>
  " "fl" for fix locationlist items
  nnoremap <silent> <Leader>fl :<C-u>AutofixLoc<CR>
<

------------------------------------------------------------------------------
COMMANDS					*autofix-commands*

:Autofix					*:Autofix*
                Apply Fixers against the QuickFix list. It prompts users for
                each fixers (like 'c' flag for `:substitute` command does).

:Autofix!					*:Autofix!*
                Like |:Autofix|, but apply all fixers without asking.

:AutofixLoc					*:AutofixLoc*
                Apply Fixers against a location list associated with current
                window.

:AutofixLoc!					*:AutofixLoc!*
                Like |:AutofixLoc|, but apply all fixers without asking.

:AutofixReloadFixers				*:AutofixReloadFixers*
                AutofixReloadFixers command reloads Fixers from 'runtimepath'.
                This is useful when you defined new Fixers and want to load
                them.
                See |autofix-defining-fixers| for how Fixers are loaded from
                'runtimepath'.

==============================================================================
CUSTOMIZING					*autofix-customizing*

------------------------------------------------------------------------------
DEFINING FIXERS					*autofix-defining-fixers*

Users can add their own fixers without touching this plugin. This section
describes step-by-step instruction for defining custom fixers.
For example Fixer definitions, please see files in autoload/autofix/fixers
under vim-autofix installation directory.

I stole this customization architecture from
https://github.com/Shougo/unite.vim . Huge thanks to Shougo-san for his
awesome plugins and making great Vim script examples accessible to the world.

1. Placing Fixer files

vim-autofix sources Fixers that can be found by the following:
>
  globpath(&runtimepath, 'autoload/autofix/fixers/**/*.vim')
<
This means, you can define your Fixers under "$HOME/.vim/autoload/fixers"
directory. For example, you can place your Fixer files as follows:
>
  $HOME/.vim
  └── autoload
      └── fixers
          ├── your_fixer.vim
          └── subdir
              └── your_another_fixer.vim
<
2. Defining a Fixer

vim-autofix expects Fixer definition files to provide a function named
"autofix#fixers#{SUBDIR_AND_FILE_NAME}#define".  This function will be called
by vim-autofix to get your Fixer.

Let's take the fixer definition files illustrated above as an example.

Define the following function in "your_fixer.vim":
>
  function! autofix#fixers#your_fixer#define() abort
    return s:fixer
  endfunction
<
And define the following function in "your_another_fixer.vim":
>
  function! autofix#fixers#subdir#your_another_fixer#define() abort
    return s:fixer
  endfunction
<
You will configure your s:fixer's in the following section.

3. Configuring a Fixer

A Fixer is a dictionary containing some required fields and some optional
fields. Use the following function to create a new Fixer:
>
  let s:fixer = autofix#fixer#new_bare('your fixer name')
<
You have to at least define "matcher" functions and an "apply" function.
Matcher functions are used to match against quickfix errors to determine if
a Fixer is applicable to an error. An apply function is the operation which
fixes the error.  Both of these functions gets qfitem as an argument, qfitem
is a dictionary obtained by calling |getqflist()| or |getloclist()|.

For example, define the following functions to match error "missing ',' before
newline" and fix it:
>
  " whatever works for the function name ("match_missing_comma" in this case)
  " as long as they are unique
  function! s:fixer.matchers.match_missing_comma(qfitem) abort dict closure
    return match(a:qfitem.text, pattern) != -1',
  endfunction'

  " when you define multiple matcher functions under s:fixer.matchers, all the
  " matcher functions should return truethy for the fixer to take effect

  function! s:fixer.apply(qfitem) abort dict closure
    " vim-autofix brings cursor to quickfix item location before calling apply
    " so just exec'ing is fine
    exec "normal! A,"
    " return truethy to signal the apply was successful
    return 1
  endfunction
<
vim:tw=78:ts=8:ft=help:norl:
